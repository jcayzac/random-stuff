/*
 * Copyright (c) 2009, Penati Mattia
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the Politecnico di Milano nor the names of its
 *    contributors may be used to endorse or promote products derived from
 *    this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef TV_PACKET_HPP
#define TV_PACKET_HPP

#ifndef TV_DONT_VECTORIZE

#if defined(__VEC__) && defined(__ALTIVEC__) // AltiVec

#define TV_VECTORIZE
#define TV_VECTORIZE_ALTIVEC
#include <altivec.h>
#undef vector
#undef bool
#undef pixel
#include <stdbool.h>

#endif // AltiVec

#if defined(__SSE2__) // SSE

#define TV_VECTORIZE
#define TV_VECTORIZE_SSE2
#include <emmintrin.h>
#include <xmmintrin.h>

#endif // SSE

#endif // TV_DONT_VECTORIZE

namespace TV { namespace packet {

enum exp {
	ID = 1
};
template<typename OTp_, unsigned int FOp_> struct exp_ret;

enum bin_exp {
	SUM = 1001,
	SUB = 1002,
	MUL = 1003,
	DIV = 1004
};
template<typename LTp_, typename RTp_, unsigned int FOp_> struct bin_exp_ret;

enum ter_exp {
	MADD  = 10001,
	NMSUB = 10002
};
template<typename ATp_, typename LTp_, typename RTp_, unsigned int FOp_> struct ter_exp_ret;

#ifdef TV_VECTORIZE

#ifdef TV_VECTORIZE_ALTIVEC
#include "src/packet/altivec/v4f.hpp"
#include "src/packet/generic/v2d.hpp"
#endif // TV_VECTORIZE_ALTIVEC

#ifdef TV_VECTORIZE_SSE2
#include "src/packet/sse2/v4f.hpp"
#include "src/packet/sse2/v2d.hpp"
#endif // TV_VECTORIZE_SSE

#else // TV_VECTORIZE

#include "src/packet/generic/v4f.hpp"
#include "src/packet/generic/v2d.hpp"

#endif // TV_VECTORIZE

} }

#endif // TV_PACKET_HPP
